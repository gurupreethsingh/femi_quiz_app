-------------------------------------------------------------------
topic 1 : React app front end set up
-------------------------------------------------------------------
steps : 
      1. create a folder in the desktop / or any folder in your computer, (quiz app)
      2. open that folder with visual studio code.
      3. create a react application in this folder using vite. using the following command. 
      npm init vite@latest
      4. give a project name as "client"
      5. navaigate inside the client folder .
      6. type the following command. 
      npm install 
      7. after the installation 
      8. run the project by typing the following command. 
      npm run dev

      it will give you this url 
      http://localhost:5173/
      copy paste this url in the browser to see your application up and running. 

      code : 
      C:\Users\PC\Desktop>cd femi_quiz_app

      C:\Users\PC\Desktop\femi_quiz_app>npm init vite@latest

      > npx
      > create-vite
      √ Project name: ... client
      √ Select a framework: » React
      √ Select a variant: » JavaScript

      Scaffolding project in C:\Users\PC\Desktop\femi_quiz_app\client...
      Done. Now run:

      cd client
      npm install
      npm run dev

      C:\Users\PC\Desktop\femi_quiz_app>cd client
      C:\Users\PC\Desktop\femi_quiz_app\client>npm install

      added 278 packages, and audited 279 packages in 38s
      103 packages are looking for funding
      run `npm fund` for details
      found 0 vulnerabilities

      VITE v5.2.11  ready in 335 ms
      ➜  Local:   http://localhost:5173/
      ➜  Network: use --host to expose
      ➜  press h + enter to show help
*******************************************************************

-------------------------------------------------------------------
topic 2 : Hello world printing in App.jsx file. 
and removing all the default coding from App.js , App.css, and index.css
-------------------------------------------------------------------

steps : 1. remove all the default coding from App.jsx file, and type hello world 
        2. remove the default css coding from App.css and index.css. 

      folder - client- src - 
      filename - App.jsx, App.css, index.css

      App.jsx

      import React from "react";
      import "./App.css";

      function App() {
      return (
            <>
            <div>
            <h1>Hello world.</h1>
            </div>
            </>
      );
      }
      export default App;

      output : hello world.
*******************************************************************

-------------------------------------------------------------------
topic 3 : change the title of the application from the index.html file.
Adding bootstrap in index.html file. 
adding tailwind css to our application.
-------------------------------------------------------------------
      Folder - client - src 
      file - index.html

      // installing bootstrap in index.html file. 

      <!doctype html>
            <html lang="en">
            <head>
            <meta charset="UTF-8" />
            <link rel="icon" type="image/svg+xml" href="/vite.svg" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Femi Quiz App</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
            </head>
                  <body>
                  <div id="root"></div>
                  <script type="module" src="/src/main.jsx"></script>
                  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
                  </body>
            </html>

      intalling tailwind css. 

            npm install -D tailwindcss postcss autoprefixer
            npx tailwindcss init -p

            tailwind.config.js

            /** @type {import('tailwindcss').Config} */
            export default {
            content: [
            "./index.html",
            "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
            extend: {},
            },
            plugins: [],
            }

            index.css

            @tailwind base;
            @tailwind components;
            @tailwind utilities;
*******************************************************************

------------------------------------------------------------------
topic 4 : making all the necessary folders in the project.
-----------------------------------------------------------------
      Folder - client - src 
      folders to make - components, pages, redux, stylesheets
      components - 
      pages - 
      redux - 
      stylesheets - 
*******************************************************************


-----------------------------------------------------------
topic 5 : configure "antd" into our application.
-----------------------------------------------------------
     npm install antd

     go add the antd , css link in out index.js(react) / main.jsx file( mern stack applications) 

     file - index.js  

      import React from "react";
      import ReactDOM from "react-dom/client";
      import App from "./App.jsx";
      import "./index.css";
      import "antd/dist/antd.min.css";

      ReactDOM.createRoot(document.getElementById("root")).render(
      <React.StrictMode>
      <App />
      </React.StrictMode>
      );

************************************************************

------------------------------------------------------------------
topic 6 : use antd components in your components.
-----------------------------------------------------------------
steps : 1. import the {Button} from te antd library at the top.
        2. show the button as an html tag in your App.js file.

      Folder - client - src 
      file - App.js 

      import "./App.css";
      import { Button, Flex } from "antd";

      function App() {
      return (
            <div className="App">
                  <Flex>
                  <h1 className="">Hello world</h1>
                  <Button type="primary">Primary Button</Button>
                  </Flex>
            </div>
            );
      }

      export default App;
*******************************************************************

------------------------------------------------------------------
topic 7 : making or writing our own css code. 
-----------------------------------------------------------------
steps : 1. make a file in the stylesheets folder call it as allignments.css(we will be writing all the alignment stylying in this file.)
      2. make another file in stylesheets folder, call it as theme.css
      3. one more in the same folder. call it as. textElements.css (stylesheet for all the text related elements. )

      Folder - client - src - stylesheets
      file : allignments.css

      .h-screen{height:100vh}.h-75{height:75vh}.h-50{height:50vh}.h-25{height:25vh}.w-screen{width:100%}.w-75{width:750%}.w-25,.w-50{width:50%}.w-400{width:400px}.flex{display:flex}.flex-col{flex-direction:column}.justify-center{justify-content:center}.justify-start{justify-content:flex-start}.justify-end{justify-content:flex-end}.justify-between{justify-content:space-between}.items-center{align-items:center}.items-start{align-items:flex-start}.items-end{align-items:flex-end}.gap-1{gap:10px}.gap-2{gap:20px}.gap-3{gap:30px}.gap-4{gap:40px}.gap-5{gap:50px}.p-5{padding:50px}.p-4{padding:40px}.p-3{padding:30px}.p-2{padding:20px}.p-1{padding:10px}

      file - textElements.css. 

      .text-2xl{font-size:1.5rem;line-height:2rem}.text-lg,.text-xl{font-size:1.25rem}.text-xl{line-height:1.75rem}.text-lg{line-height:1.5rem}.text-md{font-size:1rem;line-height:1.25rem}.text-sm{font-size:.875rem;line-height:1rem}.text-xs{font-size:.75rem;line-height:.85rem}

      theme.css

      :root{--primary:#0F3460;--secondary:#ff5722;--success:#4caf50;--info:#00bcd4;--danger:#f44336;--warning:#ff9800;--light:#f1f1f1;--dark:#212121}
       
*******************************************************************

------------------------------------------------------------------
topic 8 : making the routes login and register front end pages. 
-----------------------------------------------------------------
steps :  
      1. import browser router at the top of the file in App.js. 
      import { BrowserRouter, Routes, Route } from "react-router-dom";
      2. in pages folder, create 3 new folders. (common, user, admin)
      3. make 2 folders in common folder, Login and Register, 
      4. make Login.js file inside the Login folder. 
      5. make Register.js file inside the Register folder. 
      6. import the functional components Login.js and Register.js inside the App.js file, and make routes for both login and register page. 
      using BrowserRouter.

      Login.js 
      import React from "react";

      const Login = () => {
      return (
      <div>
            <h1>login</h1>
      </div>
      );
      };

      export default Login;

      Register.js 
      import React from "react";

      const Register = () => {
      return (
      <div>
            <h1>Register</h1>
      </div>
      );
      };

      export default Register;

      App.js 
      import "./App.css";
      import { Button, Flex } from "antd";
      import "./stylesheets/theme.css";
      import "./stylesheets/alignments.css";
      import "./stylesheets/textelements.css";
      import { BrowserRouter, Routes, Route } from "react-router-dom";
      import Login from "./pages/common/Login/Login";
      import Register from "./pages/common/Register/Register";

      function App() {
      return (
            <BrowserRouter>
            <Routes>
                  <Route path="/login" element={<Login />}></Route>
                  <Route path="/register" element={<Register />}></Route>
            </Routes>
            </BrowserRouter>
      );
      }

      export default App;

*******************************************************************

------------------------------------------------------------------
topic 9 : Designing the login page
-----------------------------------------------------------------

      file : Login.js 

import React from "react";
import { Form } from "antd";
import { Link } from "react-router-dom";

const Login = () => {
  // onFinish function.
  const onFinish = (values) => {
    console.log(values);
  };

  return (
    <div className="flex justify-center items-center h-screen w-screen">
      <div className="card w-400 p-5">
        <div className="flex flex-col">
          <h1 className="text-3xl font-semibold pb-3 text-gray-500">Sign In</h1>
          <div className="divider"></div>

          <Form
            layout="vertical pt-3"
            className="text-gray-500"
            onFinish={onFinish}
          >
            <Form.Item name="email" label="Email">
              <input type="email" required />
            </Form.Item>

            <Form.Item name="password" label="Password">
              <input type="password" required />
            </Form.Item>

            <button
              type="submit"
              className="primary-contained-btn font-semibold rounded w-100"
            >
              LOGIN
            </button>

            <div className="mt-3">
              <Link to="/register" className="underline">
                Need Account ? Register
              </Link>
            </div>
          </Form>
        </div>
      </div>
    </div>
  );
};

export default Login;


form-elements.css 

      input {
            height: 40px;      padding: 10px 20px;      border: 2px solid #ccc;      border-radius: 10px;      width: 100%;
      }

      .primary-contained-btn {
            height: 40px;      background-color: var(--primary);
            color: white;      padding: 10px 20px;
      }


*******************************************************************

------------------------------------------------------------------
topic 10 : Designing the Register page
-----------------------------------------------------------------

file : Register.js 

import React from "react";
import { Form } from "antd";
import { Link } from "react-router-dom";

const Register = () => {
  // onFinish function.
  const onFinish = (values) => {
    console.log(values);
  };

  return (
    <div className="flex justify-center items-center h-screen w-screen">
      <div className="card w-400 p-5">
        <div className="flex flex-col">
          <h1 className="text-3xl font-semibold pb-3 text-gray-500">
            Register
          </h1>
          <div className="divider"></div>

          <Form
            layout="vertical pt-3"
            className="text-gray-500"
            onFinish={onFinish}
          >
            <Form.Item name="name" label="Name">
              <input type="text" required />
            </Form.Item>

            <Form.Item name="email" label="Email">
              <input type="email" required />
            </Form.Item>

            <Form.Item name="password" label="Password">
              <input type="password" required />
            </Form.Item>

            <button
              type="submit"
              className="primary-contained-btn font-semibold rounded w-100"
            >
              REGISTER
            </button>

            <div className="mt-3">
              <Link to="/login" className="underline">
                Have an account ? Login
              </Link>
            </div>
          </Form>
        </div>
      </div>
    </div>
  );
};

export default Register;

*******************************************************************

------------------------------------------------------------------
topic 11 : Setting up the backend for the application. 
-----------------------------------------------------------------

steps : 
1. iniitialize npm in the root folder. by typing the command. (npm inti)
this will create a file called as package.json in

2. install all the necessary modules in the root folder of the project. 
by typing the following command. 

npm install express mongoose jsonwebtoken bcryptjs dotenv nodemon

this will create the package-lock.json file. in our root folder. 
3. create the .env file in the root folder of the application. 

4. make a .env file inside the root folder of the application.

4. create new folder inside the root folder of the application, call it as server. 

5. inside this server folder make a file call it as server.js , and make our express app coding. 

folder - server 
file - server.js 

      const express = require("express");

      const app = express();

      const port = process.env.PORT || 5000;

      app.listen(port, (req, res) => {
      console.log(`server successfully running at port ${port}`);
      });

open the server folder with a command prompt, and run the server.js file using the nodemon package. by typing the command.   
"nodemon server"

output : [nodemon] starting `node server.js`
server successfully running at port 5000
*******************************************************************

------------------------------------------------------------------
topic 12 : making the mongo db setup. 
-----------------------------------------------------------------
steps :  1. create mongo db account, or download locally. 
2. make all the folders required for the server , 
config, middlewares, models, routes. 

.env 

MONGO_URL=mongodb://127.0.0.1:27017/femi_quiz_app

// writing the connection code in server.js file. 

server.js 

const express = require("express");
const app = express();
require("dotenv").config();
const mongoose = require("mongoose");

mongoose
  .connect(process.env.MONGO_URL)
  .then(() => {
    console.log("Connected to MongoDB successfully.");
  })
  .catch((error) => {
    console.error("MongoDB connection error:", error);
  });

const port = process.env.PORT || 5000;

app.listen(port, () => {
  console.log(`Server successfully running at port ${port}`);
});

*******************************************************************

------------------------------------------------------------------
topic 13 : Creating the user model for our application. 
-----------------------------------------------------------------

make a file inside the models folder call it as userModel.js 
  userModel.js 

    const mongoose = require("mongoose");

    const userSchema = new mongoose.Schema(
      {
        name: { type: String, required: true },
        email: { type: String, required: true, uniquie: true },
        password: { type: String, required: true },
        isAdmin: { type: Boolean, default: false },
      },
      {
        timestamps: true,
      }
    );

    const userModel = mongoose.model("user", userSchema);

    exports.modules = userModel;


*******************************************************************

------------------------------------------------------------------
topic 14 : Creating the userRoutes in the userRoutes.js file 
-----------------------------------------------------------------

folder - routes. 
file - userRoutes.js 

    const router = require("express").Router();
    const User = require("../models/userModel");
    // we will be needing bcrypt for encrpyting the user's password.
    const bcrypt = require("bcryptjs");
    // these 3 are enough to build the api's

    // api for registration.
    router.post("/register", async (req, res) => {
      try {
        // check if theuser is already registered.
        const userExists = await User.findOne({ email: req.body.email });

        if (userExists) {
          return res
            .status(200)
            .send({ message: "User already exists", success: false });
        }

        // if the user is not existing.
        // hashing the password, using bcrypt js.
        // generate the salt for the password,
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(req.body.password, salt);

        req.body.password = hashedPassword;

        // new craete the new user.
        const newUser = new User(req.body);
        await newUser.save();
        res.send({
          message: "User created successfully.",
          success: true,
        });
      } catch (error) {
        res.status(500).send({
          message: error.message,
          data: error,
          success: false,
        });
      }
    });

    module.exports = router;

# now udpate the code in server.js file to ,

  server.js

    const express = require("express");
    const app = express();
    require("dotenv").config();
    const mongoose = require("mongoose");
    app.use(express.json());

    const usersRoute = require("./routes/userRoutes");
    app.use("/api/users", usersRoute);

    mongoose
      .connect(process.env.MONGO_URL)
      .then(() => {
        console.log("Connected to MongoDB successfully.");
      })
      .catch((error) => {
        console.error("MongoDB connection error:", error);
      });

    const port = process.env.PORT || 5000;

    app.listen(port, () => {
      console.log(`Server successfully running at port ${port}`);
    });
*******************************************************************

-------------------------------------------------------------------
topic 15 : Connecting or integrating frontend with backend , for register
-------------------------------------------------------------------

steps : 
1. in the front end . (client) inside the package.json file you have to add the proxy for the backend. 


package.json 

{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^2.2.3",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "antd": "^5.17.0",
    "axios": "^1.6.8",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-redux": "^9.1.2",
    "react-router-dom": "^6.23.0",
    "react-scripts": "5.0.1",
    "redux": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "tailwindcss": "^3.4.3"
  },
  "proxy" : "http://localhost:5000"
}

2. make a folder in src folder, call it as api calls. 

make a file in this one. call it as index.js

index.js 

import axios from "axios";

const axiosInstance = axios.create({
  headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
});

export default axiosInstance;

3. now make a file inside the apicalls folder. call it as user.js 

user.js 

const { default: axiosInstance } = require(".");

export const registerUser = async (payload) => {
  console.log("register user.");
  try {
    const response = await axiosInstance.post("/api/user/register", payload);
    return response.data;
  } catch (error) {
    return error.response.data;
  }
};


4. now write the code in front end page. Register.js, 
to register the new user. 

folder - src - pages - commons. 
file - Register.js 

import React from "react";
import { Form, message } from "antd";
import { Link } from "react-router-dom";
import { registerUser } from "../../../apicalls/users";

const Register = () => {
  // onFinish function.
  const onFinish = async (values) => {
    try {
      const response = await registerUser(values);
      if (response.success) {
        message.success(response.message);
      } else {
        message.error(response.message);
      }
    } catch (error) {
      message.error(error.message);
    }
  };

  return (
    <div className="flex justify-center items-center h-screen w-screen">
      <div className="card w-400 p-5">
        <div className="flex flex-col">
          <h1 className="text-3xl font-semibold pb-3 text-gray-500">
            Register
          </h1>
          <div className="divider"></div>

          <Form
            layout="vertical pt-3"
            className="text-gray-500"
            onFinish={onFinish}
          >
            <Form.Item name="name" label="Name">
              <input type="text" required />
            </Form.Item>

            <Form.Item name="email" label="Email">
              <input type="email" required />
            </Form.Item>

            <Form.Item name="password" label="Password">
              <input type="password" required />
            </Form.Item>

            <button
              type="submit"
              className="primary-contained-btn font-semibold rounded w-100"
            >
              REGISTER
            </button>

            <div className="mt-3">
              <Link to="/login" className="underline">
                Have an account ? Login
              </Link>
            </div>
          </Form>
        </div>
      </div>
    </div>
  );
};

export default Register;


userRoute.js 
const router = require("express").Router();
const UserModel = require("../models/userModel");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// route for register
router.post("/register", async (req, res) => {
  try {
    const userExists = await UserModel.findOne({ email: req.body.email });

    if (userExists) {
      return res
        .status(200)
        .send({ message: "User already exists", success: false });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(req.body.password, salt);
    req.body.password = hashedPassword;

    const newUser = new UserModel(req.body); // Use UserModel here
    await newUser.save();
    res.send({
      message: "User created successfully.",
      success: true,
    });
  } catch (error) {
    res.status(500).send({
      message: error.message,
      data: error,
      success: false,
    });
  }
});

module.exports = router;


users.js
const { default: axiosInstance } = require(".");

export const registerUser = async (payload) => {
  try {
    const response = await axiosInstance.post("/api/users/register", payload);
    return response.data;
  } catch (error) {
    return error.response.data;
  }
};



-------------------------------------------------------------------
topic 16 : Connecting or integrating frontend with backend , for login.
-------------------------------------------------------------------

login.js 

import React from "react";
import { Form, message } from "antd";
import { Link } from "react-router-dom";
import { loginUser } from "../../../apicalls/users";

const Login = () => {
  const onFinish = async (values) => {
    try {
      const response = await loginUser(values);
      if (response.success) {
        message.success(response.message);
        localStorage.setItem("token", response.data);
      } else {
        message.error(response.message);
      }
    } catch (error) {
      message.error(error.message);
    }
  };

  return (
    <div className="flex justify-center items-center h-screen w-screen">
      <div className="card w-400 p-5">
        <div className="flex flex-col">
          <h1 className="text-3xl font-semibold pb-3 text-gray-500">Sign In</h1>
          <div className="divider"></div>

          <Form
            layout="vertical pt-3"
            className="text-gray-500"
            onFinish={onFinish}
          >
            <Form.Item name="email" label="Email">
              <input type="email" required />
            </Form.Item>

            <Form.Item name="password" label="Password">
              <input type="password" required />
            </Form.Item>

            <button
              type="submit"
              className="primary-contained-btn font-semibold rounded w-100"
            >
              LOGIN
            </button>

            <div className="mt-3">
              <Link to="/register" className="underline">
                Need Account ? Register
              </Link>
            </div>
          </Form>
        </div>
      </div>
    </div>
  );
};

export default Login;
